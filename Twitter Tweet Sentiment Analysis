{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e1527e9b",
   "metadata": {},
   "source": [
    "# Final Project: Sentiment Analysis - Twitter Tweets\n",
    "# By: Kafele Wimbley"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "3663ea07",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras import Input\n",
    "from tensorflow.keras.layers import Activation, Bidirectional, Conv1D, Dense, Dropout, Embedding, InputLayer, LSTM, MaxPooling1D, SimpleRNN\n",
    "from tensorflow.keras.layers.experimental.preprocessing import TextVectorization\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.preprocessing import text_dataset_from_directory\n",
    "from tensorflow.strings import regex_replace\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "import tensorflow.keras as tf\n",
    "import os\n",
    "import shutil\n",
    "import random\n",
    "import imblearn\n",
    "from imblearn.over_sampling import RandomOverSampler\n",
    "from imblearn.over_sampling import SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9b26d9e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>.container { width:60% !important; }</style>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.core.display import display, HTML\n",
    "display(HTML(\"<style>.container { width:60% !important; }</style>\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "cd62be50",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to C:\\Users\\Kafele-\n",
      "[nltk_data]     Wimbley\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import re\n",
    "import nltk\n",
    "import string\n",
    "import collections\n",
    "from nltk.corpus import stopwords\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report \n",
    "from sklearn.utils import shuffle\n",
    "nltk.download('stopwords')\n",
    "stop_words = stopwords.words(\"english\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d6980bb",
   "metadata": {},
   "source": [
    "### Reading in training data and shuffling "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "3b411615",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>tweet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Irrelevant</td>\n",
       "      <td>ago experienced a game where a player had it g...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Positive</td>\n",
       "      <td>Am I the only one who likes FIFA 21, is gonna ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Irrelevant</td>\n",
       "      <td>everybody so sweaty on @PlayApex today.. fucki...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Positive</td>\n",
       "      <td>I can ’ ′ t wait up to play My Mercy Moira Jun...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Positive</td>\n",
       "      <td>Tried GTA V... It's bloody expansive.  Nice ro...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    sentiment                                              tweet\n",
       "0  Irrelevant  ago experienced a game where a player had it g...\n",
       "1    Positive  Am I the only one who likes FIFA 21, is gonna ...\n",
       "2  Irrelevant  everybody so sweaty on @PlayApex today.. fucki...\n",
       "3    Positive  I can ’ ′ t wait up to play My Mercy Moira Jun...\n",
       "4    Positive  Tried GTA V... It's bloody expansive.  Nice ro..."
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ths cell reads in data, split data, and shuffle data \n",
    "dataTrain = pd.read_csv('twitter_training.csv')\n",
    "\n",
    "# CSV File did not have a header so I created a new CSV file with header for each column \n",
    "headerList = ['id', 'name', 'sentiment', 'tweet']\n",
    "dataTrain.to_csv(\"train.csv\", header=headerList, index=False)\n",
    "\n",
    "# Read in data and pop unnecessary attributes \n",
    "trainSample = pd.read_csv(\"train.csv\")\n",
    "trainSample.pop(\"id\")\n",
    "trainSample.pop(\"name\")\n",
    "\n",
    "# Using varuable to split data\n",
    "numRowsTrain = len(trainSample) \n",
    "\n",
    "# Grabs all elements after border\n",
    "trainX = (trainSample['tweet'])[:numRowsTrain]\n",
    "trainY = (trainSample['sentiment'])[:numRowsTrain]\n",
    "\n",
    "# Shuffle training data\n",
    "combined = list(zip(trainX, trainY))\n",
    "random.shuffle(combined)\n",
    "trainX[:], trainY[:] = zip(*combined)\n",
    "\n",
    "trainSample.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "afcb7ed9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sentiment: Irrelevant\n",
      "Tweet: ago experienced a game where a player had it go afk for the whole game because they said a fat shit bit the load off and the screen started flooding and didn't notice until 15 mins into the game but their ground under their feet started to get wet... LoL players aren't even allowed.\n",
      "Sentiment: Positive\n",
      "Tweet: Am I the only one who likes FIFA 21, is gonna take some getting used to but I like it\n",
      "Sentiment: Irrelevant\n",
      "Tweet: everybody so sweaty on @PlayApex today.. fucking relax a new season isnt the end of the shitty world..\n",
      "Sentiment: Positive\n",
      "Tweet: I can ’ ′ t wait up to play My Mercy Moira Junk and Mei in Overwatch this next week!\n",
      "Sentiment: Positive\n",
      "Tweet: Tried GTA V... It's bloody expansive.  Nice road map; incl. camber and bumps and dips... BUT..... Things couldn't last more than 30 min & so in flat mode... I'll go for that VR patch (on the Epic Games store version). .. That huge world is just demanding it.\n",
      "Sentiment: Irrelevant\n",
      "Tweet: I love seeing Naughty Dog fanboys squirm every fifth Cyberpunk 2077 gets locked up. They are desperate to it we fail, it’s pathetic. x]\n",
      "Sentiment: Positive\n",
      "Tweet: It's kind of incredible what games I'll be getting THIS YEAR for the Xbox Series X . . . I'm getting:. . Assassin's Creed Valhalla. Watch Dogs Legion. Dirt 5. Fuser. The Falconeer. . +thanks to gamepass:. . Gears Tactics. Destiny 2 Beyond Light. . +Before Xmas:. . Cyberpunk. The Medium. . . \n",
      "Sentiment: Negative\n",
      "Tweet: Are MUT PC Servers Down? @EAHelp @EAMaddenNFL @EASPORTS_MUT  Trying to do the Star Of The Day: Justin Jackson and keep getting an error on Madden 21 on PC through Stream pic.twitter.com/kK1U0OXxHB\n",
      "Sentiment: Neutral\n",
      "Tweet: Verizon has joined a growing social advertising boycott of Facebook over the social network ’ s abrupt handling of his hate speech and another decision whether to allow several contentious posts from the Donald Trump to remain on its platform or ft. hind com / content / 5e9624 pages …\n",
      "Sentiment: Positive\n",
      "Tweet: @EASPORTSFIFA been a fan from FIFA too long for Halloween to happen!!\n"
     ]
    }
   ],
   "source": [
    "for i in range(0, 10):\n",
    "    print(\"Sentiment: \" + trainY[i])\n",
    "    print(\"Tweet: \" + trainX[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a809d0bb",
   "metadata": {},
   "source": [
    "### Reading in testing data and shuffling "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "f7fda417",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>tweet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Negative</td>\n",
       "      <td>I've never been this tierd in my entire life #...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Neutral</td>\n",
       "      <td>Microsoft’s Xbox boss just gave an update on o...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Positive</td>\n",
       "      <td>this game looks insane wtf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Neutral</td>\n",
       "      <td>@PlayApex you got a bug when a game ranked is ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Negative</td>\n",
       "      <td>More FIFA? Leslie Steiger must be joking! See ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  sentiment                                              tweet\n",
       "0  Negative  I've never been this tierd in my entire life #...\n",
       "1   Neutral  Microsoft’s Xbox boss just gave an update on o...\n",
       "2  Positive                         this game looks insane wtf\n",
       "3   Neutral  @PlayApex you got a bug when a game ranked is ...\n",
       "4  Negative  More FIFA? Leslie Steiger must be joking! See ..."
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataTest = pd.read_csv('twitter_test.csv')\n",
    "\n",
    "# CSV File did not have a header so I created a new CSV file with header for each column \n",
    "headerList = ['id', 'name', 'sentiment', 'tweet']\n",
    "dataTest.to_csv(\"test.csv\", header=headerList, index=False)\n",
    "\n",
    "# Read in data and pop unnecessary attributes \n",
    "testSample = pd.read_csv(\"test.csv\")\n",
    "testSample.pop(\"id\")\n",
    "testSample.pop(\"name\")\n",
    "\n",
    "# numbers of rows to read in from test dataset \n",
    "numRowsTest = len(testSample)\n",
    "\n",
    "# reading in data from test dataset \n",
    "testX = (testSample['tweet'])[:numRowsTest]\n",
    "testY = (testSample['sentiment'])[:numRowsTest]\n",
    "\n",
    "# shuffle training dataset \n",
    "combined = list(zip(testX, testY))\n",
    "random.shuffle(combined)\n",
    "testX[:], testY[:] = zip(*combined)\n",
    "\n",
    "testSample.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "47264836",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sentiment: Negative\n",
      "Tweet: I've never been this tierd in my entire life #LeagueOfLegends #struggle pic.twitter.com/PvI9sX4c7W\n",
      "Sentiment: Neutral\n",
      "Tweet: Microsoft’s Xbox boss just gave an update on one of the Xbox Series X’s most exciting features\n",
      "#GamerNation #Gaming #VideoGames #XboxOne #XboxOneX #XCloud #XboxSeriesX  #RETROGAMINGhttps://bgr.com/2020/02/10/xbox-series-x-specs-vs-xbox-one-backward-compatibility-working-spencer/\n",
      "Sentiment: Positive\n",
      "Tweet: this game looks insane wtf\n",
      "Sentiment: Neutral\n",
      "Tweet: @PlayApex you got a bug when a game ranked is ended, my friend get 10 min penality and he dont leave the game .\n",
      "Sentiment: Negative\n",
      "Tweet: More FIFA? Leslie Steiger must be joking! See the horrible thing here ift.tt/2Y1TBtO :///\n",
      "Sentiment: Negative\n",
      "Tweet: Why does nobody want to sign for my @FGRFC_Official fifa 20 side I’m livid Messi being a pure uppity cunt\n",
      "Sentiment: Positive\n",
      "Tweet: Thanks @RockstarGames , you're rock stars!  #RedDeadRedemption pic.twitter.com/ztc25UcGRl\n",
      "Sentiment: Irrelevant\n",
      "Tweet: I’m gonna say this again @imjustbait is the funniest meme page ever 😌\n",
      "Sentiment: Irrelevant\n",
      "Tweet: Amazing how the mainstream media tries to ‘normalise’ muslim criminals and terrorists. @BDUTT painted Burhan Wani as a facebook star, son of a schoolmaster. @washingtonpost made Baghdadi an austere scholar. The Print paints Shahrukh as an aspiring model.\n",
      "Sentiment: Negative\n",
      "Tweet: @VZWSupport I ported my number over to my Verizon account. Phone calls work. SMS is totally broken now.  Nothing in or out that way anymore. My Verizon app is also still broken. Not a great experience so far.\n"
     ]
    }
   ],
   "source": [
    "for i in range(0, 10):\n",
    "    print(\"Sentiment: \" + testY[i])\n",
    "    print(\"Tweet: \" + testX[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cf8eba9",
   "metadata": {},
   "source": [
    "### Converting sentiment string labels to integer labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "783ddd50",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function converts sentiment string labels into integers \n",
    "def labelInt(labels):\n",
    "    numLabels = len(labels)\n",
    "    for i in range(0, numLabels):\n",
    "        if labels[i] == 'Negative':\n",
    "            labels[i] = 0\n",
    "        elif labels[i] == 'Neutral':\n",
    "            labels[i] = 1 \n",
    "        elif labels[i] == 'Positive':\n",
    "            labels[i] = 2\n",
    "        elif labels[i] == 'Irrelevant':\n",
    "            labels[i] = 3\n",
    "    return labels\n",
    "\n",
    "trainY = labelInt(trainY)\n",
    "testY = labelInt(testY)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6e8f37b",
   "metadata": {},
   "source": [
    "### Text preprocessing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "8c40e394",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def textPreproc(textX):\n",
    "    numText = len(textX)\n",
    "    for i in range(0, numText):\n",
    "        \n",
    "        # replace text with emply string if text value is NaN\n",
    "        if pd.isna(textX[i]):\n",
    "            textX[i] = ''\n",
    "        # Remove numbers \n",
    "        textX[i] = re.sub('\\w*\\d+\\w*', '', textX[i])\n",
    "        # lower case all letters\n",
    "        textX[i] = textX[i].lower()\n",
    "        # removing all outside of ascii\n",
    "        textX[i] = textX[i].encode('ascii', 'ignore').decode()\n",
    "        # removing '\\'\n",
    "        textX[i] = re.sub(\"\\'\\w+\", '',textX[i])\n",
    "        # removing all stop words\n",
    "        textX[i] = ' '.join([word for word in textX[i].split(' ') if word not in stop_words])\n",
    "        # remove all punctuations\n",
    "        textX[i] = re.sub('[%s]' % re.escape(string.punctuation), ' ', textX[i])\n",
    "        # remove extra spaces\n",
    "        textX[i] = re.sub('\\s{2,}', ' ', textX[i])\n",
    "\n",
    "    return textX\n",
    "\n",
    "trainX = textPreproc(trainX)\n",
    "testX = textPreproc(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "c23efcaf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sentiment: 3\n",
      "Tweet: ago experienced game player go afk whole game said fat shit bit load screen started flooding notice mins game ground feet started get wet lol players even allowed \n",
      "Sentiment: 2\n",
      "Tweet: one likes fifa gonna take getting used like\n",
      "Sentiment: 3\n",
      "Tweet: everybody sweaty playapex today fucking relax new season isnt end shitty world \n",
      "Sentiment: 2\n",
      "Tweet:  wait play mercy moira junk mei overwatch next week \n",
      "Sentiment: 2\n",
      "Tweet: tried gta v bloody expansive nice road map incl camber bumps dips but things last min flat mode go vr patch on epic games store version huge world demanding it \n",
      "Sentiment: 3\n",
      "Tweet: love seeing naughty dog fanboys squirm every fifth cyberpunk gets locked up desperate fail pathetic x \n",
      "Sentiment: 2\n",
      "Tweet: kind incredible games getting year xbox series x getting assassin creed valhalla watch dogs legion dirt fuser falconeer thanks gamepass gears tactics destiny beyond light before xmas cyberpunk medium \n",
      "Sentiment: 0\n",
      "Tweet: mut pc servers down eahelp eamaddennfl easports mut trying star day justin jackson keep getting error madden pc stream pic twitter com \n",
      "Sentiment: 1\n",
      "Tweet: verizon joined growing social advertising boycott facebook social network abrupt handling hate speech another decision whether allow several contentious posts donald trump remain platform ft hind com content pages \n",
      "Sentiment: 2\n",
      "Tweet:  easportsfifa fan fifa long halloween happen \n"
     ]
    }
   ],
   "source": [
    "for i in range(0, 10):\n",
    "    print(\"Sentiment: \" + str(trainY[i]))\n",
    "    print(\"Tweet: \" + str(trainX[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "c3f7a884",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sentiment: 0\n",
      "Tweet: never tierd entire life leagueoflegends struggle pic twitter com \n",
      "Sentiment: 1\n",
      "Tweet: microsofts xbox boss gave update one xbox series xs exciting features gamernation gaming videogames xboxone xboxonex xcloud xboxseriesx retrogaminghttps bgr com xbox series x specs vs xbox one backward compatibility working spencer \n",
      "Sentiment: 2\n",
      "Tweet: game looks insane wtf\n",
      "Sentiment: 1\n",
      "Tweet:  playapex got bug game ranked ended friend get min penality dont leave game \n",
      "Sentiment: 0\n",
      "Tweet: fifa leslie steiger must joking see horrible thing ift tt \n",
      "Sentiment: 0\n",
      "Tweet: nobody want sign fgrfc official fifa side im livid messi pure uppity cunt\n",
      "Sentiment: 2\n",
      "Tweet: thanks rockstargames rock stars reddeadredemption pic twitter com \n",
      "Sentiment: 3\n",
      "Tweet: im gonna say imjustbait funniest meme page ever \n",
      "Sentiment: 3\n",
      "Tweet: amazing mainstream media tries normalise muslim criminals terrorists bdutt painted burhan wani facebook star son schoolmaster washingtonpost made baghdadi austere scholar print paints shahrukh aspiring model \n",
      "Sentiment: 0\n",
      "Tweet:  vzwsupport ported number verizon account phone calls work sms totally broken now nothing way anymore verizon app also still broken great experience far \n"
     ]
    }
   ],
   "source": [
    "for i in range(0, 10):\n",
    "    print(\"Sentiment: \" + str(testY[i]))\n",
    "    print(\"Tweet: \" + str(testX[i]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b72b279f",
   "metadata": {},
   "source": [
    "### Numpy array conversion of training/ testing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "43e96a8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({0: 22542, 2: 20831, 1: 18318, 3: 12990})\n",
      "(74681,) (74681,)\n",
      "Counter({1: 285, 2: 277, 0: 266, 3: 171})\n",
      "(999,) (999,)\n"
     ]
    }
   ],
   "source": [
    "def prepare_data(text, label):\n",
    "    textX = []\n",
    "    labelsY = []\n",
    "\n",
    "    for i in range(0, len(text)):\n",
    "        textX.append(np.array(text[i]))\n",
    "        labelsY.append(np.array(label[i]))\n",
    "    \n",
    "    return np.array(textX), np.array(labelsY)\n",
    "\n",
    "trainXA, trainYA = prepare_data(trainX, trainY)\n",
    "testXA, testYA = prepare_data(testX, testY)\n",
    "\n",
    "# Print training dataset sentiment amount & shape of training features and labels\n",
    "print(collections.Counter(trainYA))\n",
    "print(trainXA.shape, trainYA.shape)\n",
    "\n",
    "# Print testing dataset sentiment amoun & shape of testing features and labels\n",
    "print(collections.Counter(testYA))\n",
    "print(testXA.shape, testYA.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4d171ae",
   "metadata": {},
   "source": [
    "### Oversampling of training/ testing data & converting labels to catergorical "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "c3f8661c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({3: 22542, 2: 22542, 0: 22542, 1: 22542})\n",
      "(90168,) (90168, 4)\n",
      "Counter({0: 285, 1: 285, 2: 285, 3: 285})\n",
      "(1140,) (1140, 4)\n"
     ]
    }
   ],
   "source": [
    "# reshaping training data inorder to oversample dataset \n",
    "feat = trainXA.reshape(-1,1)\n",
    "label = trainYA.reshape(-1,1)\n",
    "\n",
    "# oversampling training dataset which will result in equal amount of each type of sentiment and tweets \n",
    "oversample = RandomOverSampler(sampling_strategy='all')\n",
    "xOver, yOver = oversample.fit_resample(feat, label)\n",
    "\n",
    "# reshaping data again to correct format and converting training labels to categorical \n",
    "trainXA = xOver.reshape(-1)\n",
    "trainYA = yOver.reshape(-1)\n",
    "trainYA = to_categorical(yOver, 4)\n",
    "\n",
    "# reshaping testing data inorder to oversample dataset \n",
    "testFeat = testXA.reshape(-1, 1)\n",
    "testLabel = testYA.reshape(-1, 1)\n",
    "\n",
    "# oversampling testing dataset which will result in equal amount of each type of sentiment and tweets \n",
    "testXOver, testYOver = oversample.fit_resample(testFeat, testLabel)\n",
    "\n",
    "# reshaping data again to correct format and converting training labels to categorical \n",
    "testXA = testXOver.reshape(-1)\n",
    "testYA = testYOver.reshape(-1)\n",
    "testYA = to_categorical(testYOver, 4)\n",
    "\n",
    "# Print training dataset sentiment amount & shape of training features and labels\n",
    "print(collections.Counter(yOver))\n",
    "print(trainXA.shape, trainYA.shape)\n",
    "\n",
    "# Print testing dataset sentiment amoun & shape of testing features and labels\n",
    "print(collections.Counter(testYOver))\n",
    "print(testXA.shape, testYA.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b72f7f55",
   "metadata": {},
   "source": [
    "### Benchmark Simple RNN Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "1e53debf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "text_vectorization (TextVect (None, None)              0         \n",
      "_________________________________________________________________\n",
      "embedding (Embedding)        (None, None, 128)         3395200   \n",
      "_________________________________________________________________\n",
      "simple_rnn (SimpleRNN)       (None, 64)                12352     \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 64)                4160      \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 4)                 260       \n",
      "=================================================================\n",
      "Total params: 3,411,972\n",
      "Trainable params: 3,411,972\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "tf.backend.clear_session()\n",
    "\n",
    "vectorizeLayer = TextVectorization(output_mode = 'int')\n",
    "\n",
    "# adapt() fits the TextVectorization layer to our text dataset. This is when the\n",
    "vectorizeLayer.adapt(trainXA)\n",
    "\n",
    "modelB = Sequential()\n",
    "\n",
    "modelB.add(Input(shape=(1,), dtype = 'string'))\n",
    "\n",
    "# text vectorization layer\n",
    "modelB.add(vectorizeLayer)\n",
    "\n",
    "# add an embedding layer to turn integers into fixed-length vectors\n",
    "modelB.add(Embedding(vectorizeLayer.vocabulary_size(), 128))\n",
    "\n",
    "# add a fully-connected recurrent layer\n",
    "modelB.add(SimpleRNN(64))\n",
    "\n",
    "# add a dense layer\n",
    "modelB.add(Dense(64, activation = 'relu'))\n",
    "\n",
    "# add softmax classifier\n",
    "modelB.add(Dense(4, activation = 'softmax'))\n",
    "\n",
    "# compiling the model\n",
    "modelB.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['acc'])\n",
    "# getting the summary of the model\n",
    "modelB.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "ce45c738",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "2255/2255 [==============================] - 69s 30ms/step - loss: 1.3625 - acc: 0.3108 - val_loss: 1.4348 - val_acc: 0.2802\n",
      "Epoch 2/10\n",
      "2255/2255 [==============================] - 75s 33ms/step - loss: 1.2488 - acc: 0.4047 - val_loss: 1.2350 - val_acc: 0.3542\n",
      "Epoch 3/10\n",
      "2255/2255 [==============================] - 77s 34ms/step - loss: 1.0160 - acc: 0.5633 - val_loss: 0.9246 - val_acc: 0.6598\n",
      "Epoch 4/10\n",
      "2255/2255 [==============================] - 76s 33ms/step - loss: 0.7403 - acc: 0.7378 - val_loss: 0.7313 - val_acc: 0.7592\n",
      "Epoch 5/10\n",
      "2255/2255 [==============================] - 80s 35ms/step - loss: 0.5693 - acc: 0.8075 - val_loss: 0.5222 - val_acc: 0.8400\n",
      "Epoch 6/10\n",
      "2255/2255 [==============================] - 77s 34ms/step - loss: 0.5475 - acc: 0.8218 - val_loss: 0.5246 - val_acc: 0.8283\n",
      "Epoch 7/10\n",
      "2255/2255 [==============================] - 78s 34ms/step - loss: 0.4486 - acc: 0.8524 - val_loss: 0.6256 - val_acc: 0.8268\n",
      "Epoch 8/10\n",
      "2255/2255 [==============================] - 82s 36ms/step - loss: 0.4189 - acc: 0.8613 - val_loss: 0.6179 - val_acc: 0.7881\n",
      "Epoch 9/10\n",
      "2255/2255 [==============================] - 79s 35ms/step - loss: 0.3763 - acc: 0.8720 - val_loss: 0.4791 - val_acc: 0.8345\n",
      "Epoch 10/10\n",
      "2255/2255 [==============================] - 78s 35ms/step - loss: 0.3727 - acc: 0.8727 - val_loss: 0.3839 - val_acc: 0.8688\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1e7c9b07880>"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# epochs used for training\n",
    "epochs = 10\n",
    "\n",
    "# training the model\n",
    "H = modelB.fit(trainXA, trainYA, validation_split = 0.2, epochs = epochs)\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "plt.figure()\n",
    "plt.plot(np.arange(0, epochs), H.history['loss'], label = 'train_loss')\n",
    "plt.plot(np.arange(0, epochs), H.history['val_loss'], label = 'val_loss')\n",
    "plt.plot(np.arange(0, epochs), H.history['acc'], label = 'train_acc')\n",
    "plt.plot(np.arange(0, epochs), H.history['val_acc'], label = 'val_acc')\n",
    "    \n",
    "# add labels and legend\n",
    "plt.title('Training Loss and Accuracy')\n",
    "plt.xlabel('Epoch #')\n",
    "plt.ylabel('Loss/Accuracy')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "283bd0f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.92      0.92       285\n",
      "           1       0.90      0.85      0.87       285\n",
      "           2       0.93      0.90      0.91       285\n",
      "           3       0.86      0.94      0.89       285\n",
      "\n",
      "    accuracy                           0.90      1140\n",
      "   macro avg       0.90      0.90      0.90      1140\n",
      "weighted avg       0.90      0.90      0.90      1140\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Test Accuracy')\n",
    "predictedTestY = modelB.predict(testXA)\n",
    "predictedTestY = predictedTestY.argmax(axis=1)\n",
    "testY_class = testYA.argmax(axis=1)\n",
    "print(classification_report(testY_class, predictedTestY))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14c5d767",
   "metadata": {},
   "source": [
    "### Trial 1 Bidirectional Simple RNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "efa0fc95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "text_vectorization (TextVect (None, None)              0         \n",
      "_________________________________________________________________\n",
      "embedding (Embedding)        (None, None, 128)         3395200   \n",
      "_________________________________________________________________\n",
      "bidirectional (Bidirectional (None, 128)               24704     \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 64)                8256      \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 4)                 260       \n",
      "=================================================================\n",
      "Total params: 3,428,420\n",
      "Trainable params: 3,428,420\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "tf.backend.clear_session()\n",
    "\n",
    "modelT1 = Sequential()\n",
    "\n",
    "modelT1.add(Input(shape=(1,), dtype = 'string'))\n",
    "\n",
    "# text vectorization layer\n",
    "modelT1.add(vectorizeLayer)\n",
    "\n",
    "# add an embedding layer to turn integers into fixed-length vectors\n",
    "modelT1.add(Embedding(vectorizeLayer.vocabulary_size(), 128))\n",
    "\n",
    "# add a fully-connected recurrent layer\n",
    "modelT1.add(Bidirectional(SimpleRNN(64)))\n",
    "\n",
    "# add a dense layer\n",
    "modelT1.add(Dense(64, activation = 'relu'))\n",
    "\n",
    "# add softmax classifier\n",
    "modelT1.add(Dense(4, activation = 'softmax'))\n",
    "\n",
    "# compiling the model\n",
    "modelT1.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['acc'])\n",
    "# getting the summary of the model\n",
    "modelT1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "525586bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "2255/2255 [==============================] - 89s 39ms/step - loss: 0.7499 - acc: 0.6962 - val_loss: 0.3271 - val_acc: 0.8775\n",
      "Epoch 2/10\n",
      "2255/2255 [==============================] - 89s 40ms/step - loss: 0.2684 - acc: 0.8992 - val_loss: 0.2003 - val_acc: 0.9279\n",
      "Epoch 3/10\n",
      "2255/2255 [==============================] - 86s 38ms/step - loss: 0.1815 - acc: 0.9301 - val_loss: 0.1930 - val_acc: 0.9244\n",
      "Epoch 4/10\n",
      "2255/2255 [==============================] - 86s 38ms/step - loss: 0.1531 - acc: 0.9390 - val_loss: 0.1827 - val_acc: 0.9333\n",
      "Epoch 5/10\n",
      "2255/2255 [==============================] - 90s 40ms/step - loss: 0.1386 - acc: 0.9444 - val_loss: 0.1783 - val_acc: 0.9373\n",
      "Epoch 6/10\n",
      "2255/2255 [==============================] - 86s 38ms/step - loss: 0.1255 - acc: 0.9474 - val_loss: 0.1796 - val_acc: 0.9362\n",
      "Epoch 7/10\n",
      "2255/2255 [==============================] - 88s 39ms/step - loss: 0.1205 - acc: 0.9496 - val_loss: 0.1788 - val_acc: 0.9325\n",
      "Epoch 8/10\n",
      "2255/2255 [==============================] - 86s 38ms/step - loss: 0.1160 - acc: 0.9497 - val_loss: 0.1803 - val_acc: 0.9359\n",
      "Epoch 9/10\n",
      "2255/2255 [==============================] - 84s 37ms/step - loss: 0.1074 - acc: 0.9534 - val_loss: 0.2583 - val_acc: 0.9161\n",
      "Epoch 10/10\n",
      "2255/2255 [==============================] - 85s 38ms/step - loss: 0.1075 - acc: 0.9536 - val_loss: 0.1897 - val_acc: 0.9367\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1e7c7e853a0>"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# epochs used for training\n",
    "epochs = 10\n",
    "\n",
    "# training the model\n",
    "H = modelT1.fit(trainXA, trainYA, validation_split = 0.2, epochs = epochs)\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "plt.figure()\n",
    "plt.plot(np.arange(0, epochs), H.history['loss'], label = 'train_loss')\n",
    "plt.plot(np.arange(0, epochs), H.history['val_loss'], label = 'val_loss')\n",
    "plt.plot(np.arange(0, epochs), H.history['acc'], label = 'train_acc')\n",
    "plt.plot(np.arange(0, epochs), H.history['val_acc'], label = 'val_acc')\n",
    "    \n",
    "# add labels and legend\n",
    "plt.title('Training Loss and Accuracy')\n",
    "plt.xlabel('Epoch #')\n",
    "plt.ylabel('Loss/Accuracy')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "1fe67f80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.96      0.97       285\n",
      "           1       0.97      0.94      0.95       285\n",
      "           2       0.95      0.98      0.96       285\n",
      "           3       0.98      0.99      0.98       285\n",
      "\n",
      "    accuracy                           0.97      1140\n",
      "   macro avg       0.97      0.97      0.97      1140\n",
      "weighted avg       0.97      0.97      0.97      1140\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Test Accuracy')\n",
    "predictedTestY = modelT1.predict(testXA)\n",
    "predictedTestY = predictedTestY.argmax(axis=1)\n",
    "testY_class = testYA.argmax(axis=1)\n",
    "print(classification_report(testY_class, predictedTestY))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "924b82ac",
   "metadata": {},
   "source": [
    "### Trial 2 Bidirectional Simple RNN with Dropout "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "a9535a74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "text_vectorization (TextVect (None, None)              0         \n",
      "_________________________________________________________________\n",
      "embedding (Embedding)        (None, None, 128)         3395200   \n",
      "_________________________________________________________________\n",
      "bidirectional (Bidirectional (None, 128)               24704     \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 64)                8256      \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 4)                 260       \n",
      "=================================================================\n",
      "Total params: 3,428,420\n",
      "Trainable params: 3,428,420\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "tf.backend.clear_session()\n",
    "\n",
    "modelT2 = Sequential()\n",
    "\n",
    "modelT2.add(Input(shape=(1,), dtype = 'string'))\n",
    "\n",
    "# text vectorization layer\n",
    "modelT2.add(vectorizeLayer)\n",
    "\n",
    "# add an embedding layer to turn integers into fixed-length vectors\n",
    "modelT2.add(Embedding(vectorizeLayer.vocabulary_size(), 128))\n",
    "\n",
    "# add a fully-connected recurrent layer\n",
    "modelT2.add(Bidirectional(SimpleRNN(64)))\n",
    "modelT2.add(Dropout(0.5))\n",
    "\n",
    "# add a dense layer\n",
    "modelT2.add(Dense(64, activation = 'relu'))\n",
    "modelT2.add(Dropout(0.5))\n",
    "\n",
    "# add softmax classifier\n",
    "modelT2.add(Dense(4, activation = 'softmax'))\n",
    "\n",
    "# compiling the model\n",
    "modelT2.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['acc'])\n",
    "# getting the summary of the model\n",
    "modelT2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "d47f29bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "2255/2255 [==============================] - 90s 39ms/step - loss: 0.9232 - acc: 0.6192 - val_loss: 0.4794 - val_acc: 0.8202\n",
      "Epoch 2/10\n",
      "2255/2255 [==============================] - 85s 38ms/step - loss: 0.4091 - acc: 0.8551 - val_loss: 0.2550 - val_acc: 0.8943\n",
      "Epoch 3/10\n",
      "2255/2255 [==============================] - 80s 36ms/step - loss: 0.2815 - acc: 0.8983 - val_loss: 0.2303 - val_acc: 0.9114\n",
      "Epoch 4/10\n",
      "2255/2255 [==============================] - 82s 36ms/step - loss: 0.2317 - acc: 0.9150 - val_loss: 0.2019 - val_acc: 0.9197\n",
      "Epoch 5/10\n",
      "2255/2255 [==============================] - 84s 37ms/step - loss: 0.2145 - acc: 0.9215 - val_loss: 0.2127 - val_acc: 0.9147\n",
      "Epoch 6/10\n",
      "2255/2255 [==============================] - 83s 37ms/step - loss: 0.1869 - acc: 0.9301 - val_loss: 0.2064 - val_acc: 0.9180\n",
      "Epoch 7/10\n",
      "2255/2255 [==============================] - 92s 41ms/step - loss: 0.1834 - acc: 0.9311 - val_loss: 0.2004 - val_acc: 0.9188\n",
      "Epoch 8/10\n",
      "2255/2255 [==============================] - 91s 40ms/step - loss: 0.1732 - acc: 0.9341 - val_loss: 0.1974 - val_acc: 0.9233\n",
      "Epoch 9/10\n",
      "2255/2255 [==============================] - 87s 39ms/step - loss: 0.1705 - acc: 0.9360 - val_loss: 0.1895 - val_acc: 0.9264\n",
      "Epoch 10/10\n",
      "2255/2255 [==============================] - 86s 38ms/step - loss: 0.1560 - acc: 0.9392 - val_loss: 0.1859 - val_acc: 0.9279\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1e7c5639bb0>"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# epochs used for training\n",
    "epochs = 10\n",
    "\n",
    "# training the model\n",
    "H = modelT2.fit(trainXA, trainYA, validation_split = 0.2, epochs = epochs)\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "plt.figure()\n",
    "plt.plot(np.arange(0, epochs), H.history['loss'], label = 'train_loss')\n",
    "plt.plot(np.arange(0, epochs), H.history['val_loss'], label = 'val_loss')\n",
    "plt.plot(np.arange(0, epochs), H.history['acc'], label = 'train_acc')\n",
    "plt.plot(np.arange(0, epochs), H.history['val_acc'], label = 'val_acc')\n",
    "    \n",
    "# add labels and legend\n",
    "plt.title('Training Loss and Accuracy')\n",
    "plt.xlabel('Epoch #')\n",
    "plt.ylabel('Loss/Accuracy')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "64a7543a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.97      0.96       285\n",
      "           1       0.99      0.95      0.97       285\n",
      "           2       0.96      0.98      0.97       285\n",
      "           3       0.98      0.98      0.98       285\n",
      "\n",
      "    accuracy                           0.97      1140\n",
      "   macro avg       0.97      0.97      0.97      1140\n",
      "weighted avg       0.97      0.97      0.97      1140\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Test Accuracy')\n",
    "predictedTestY = modelT2.predict(testXA)\n",
    "predictedTestY = predictedTestY.argmax(axis=1)\n",
    "testY_class = testYA.argmax(axis=1)\n",
    "print(classification_report(testY_class, predictedTestY))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed4b0f92",
   "metadata": {},
   "source": [
    "### Trial 3 LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "fdb1a9fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "text_vectorization (TextVect (None, None)              0         \n",
      "_________________________________________________________________\n",
      "embedding (Embedding)        (None, None, 128)         3395200   \n",
      "_________________________________________________________________\n",
      "lstm (LSTM)                  (None, 64)                49408     \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 64)                4160      \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 4)                 260       \n",
      "=================================================================\n",
      "Total params: 3,449,028\n",
      "Trainable params: 3,449,028\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "tf.backend.clear_session()\n",
    "\n",
    "vectorizeLayer = TextVectorization(output_mode = 'int')\n",
    "\n",
    "vectorizeLayer.adapt(trainXA)\n",
    "\n",
    "modelT3 = Sequential()\n",
    "\n",
    "modelT3.add(Input(shape=(1,), dtype = 'string'))\n",
    "\n",
    "# add layer to the model\n",
    "modelT3.add(vectorizeLayer)\n",
    "\n",
    "# add an embedding layer to turn integers into fixed-length vectors\n",
    "modelT3.add(Embedding(vectorizeLayer.vocabulary_size(), 128))\n",
    "\n",
    "# add a fully-connected recurrent layer\n",
    "modelT3.add(LSTM(64))\n",
    "\n",
    "# add a dense layer\n",
    "modelT3.add(Dense(64, activation = 'relu'))\n",
    "modelT3.add(Dropout(0.5))\n",
    "\n",
    "# add softmax classifier\n",
    "modelT3.add(Dense(4, activation = 'sigmoid'))\n",
    "\n",
    "# compiling the model\n",
    "modelT3.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['acc'])\n",
    "# getting the summary of the model\n",
    "modelT3.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "7d250e87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "2255/2255 [==============================] - 103s 45ms/step - loss: 1.0039 - acc: 0.5798 - val_loss: 0.6889 - val_acc: 0.7353\n",
      "Epoch 2/10\n",
      "2255/2255 [==============================] - 102s 45ms/step - loss: 0.5305 - acc: 0.8141 - val_loss: 0.4916 - val_acc: 0.7974\n",
      "Epoch 3/10\n",
      "2255/2255 [==============================] - 101s 45ms/step - loss: 0.3655 - acc: 0.8674 - val_loss: 0.3629 - val_acc: 0.8570\n",
      "Epoch 4/10\n",
      "2255/2255 [==============================] - 99s 44ms/step - loss: 0.2884 - acc: 0.8925 - val_loss: 0.3206 - val_acc: 0.8648\n",
      "Epoch 5/10\n",
      "2255/2255 [==============================] - 101s 45ms/step - loss: 0.2413 - acc: 0.9096 - val_loss: 0.2554 - val_acc: 0.8867\n",
      "Epoch 6/10\n",
      "2255/2255 [==============================] - 103s 46ms/step - loss: 0.2061 - acc: 0.9215 - val_loss: 0.2163 - val_acc: 0.9168\n",
      "Epoch 7/10\n",
      "2255/2255 [==============================] - 106s 47ms/step - loss: 0.1816 - acc: 0.9282 - val_loss: 0.2537 - val_acc: 0.9055\n",
      "Epoch 8/10\n",
      "2255/2255 [==============================] - 103s 46ms/step - loss: 0.1616 - acc: 0.9355 - val_loss: 0.2223 - val_acc: 0.9131\n",
      "Epoch 9/10\n",
      "2255/2255 [==============================] - 101s 45ms/step - loss: 0.1471 - acc: 0.9396 - val_loss: 0.2125 - val_acc: 0.9202\n",
      "Epoch 10/10\n",
      "2255/2255 [==============================] - 106s 47ms/step - loss: 0.1358 - acc: 0.9431 - val_loss: 0.2125 - val_acc: 0.9194\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1e7cb886e80>"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# epochs used for training\n",
    "epochs = 10\n",
    "\n",
    "# training the model\n",
    "H = modelT3.fit(trainXA, trainYA, validation_split = 0.2, epochs = epochs)\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "plt.figure()\n",
    "plt.plot(np.arange(0, epochs), H.history['loss'], label = 'train_loss')\n",
    "plt.plot(np.arange(0, epochs), H.history['val_loss'], label = 'val_loss')\n",
    "plt.plot(np.arange(0, epochs), H.history['acc'], label = 'train_acc')\n",
    "plt.plot(np.arange(0, epochs), H.history['val_acc'], label = 'val_acc')\n",
    "    \n",
    "# add labels and legend\n",
    "plt.title('Training Loss and Accuracy')\n",
    "plt.xlabel('Epoch #')\n",
    "plt.ylabel('Loss/Accuracy')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "97cd6b58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.98      0.97       285\n",
      "           1       0.99      0.93      0.96       285\n",
      "           2       0.94      0.98      0.96       285\n",
      "           3       0.97      0.97      0.97       285\n",
      "\n",
      "    accuracy                           0.96      1140\n",
      "   macro avg       0.96      0.96      0.96      1140\n",
      "weighted avg       0.96      0.96      0.96      1140\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Test Accuracy')\n",
    "predictedTestY = modelT3.predict(testXA)\n",
    "predictedTestY = predictedTestY.argmax(axis=1)\n",
    "testY_class = testYA.argmax(axis=1)\n",
    "print(classification_report(testY_class, predictedTestY))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
